/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * OpenAPI spec version: 1.0.11
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AvatarOutput
 */
export interface AvatarOutput {
    /**
     *
     * @type {number}
     * @memberof AvatarOutput
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof AvatarOutput
     */
    path: string;
}
/**
 *
 * @export
 * @interface MatchOutput
 */
export interface MatchOutput {
    /**
     *
     * @type {number}
     * @memberof MatchOutput
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof MatchOutput
     */
    created_at: string;
    /**
     *
     * @type {string}
     * @memberof MatchOutput
     */
    finished_at: string;
    /**
     *
     * @type {PlayerOutput}
     * @memberof MatchOutput
     */
    winner: PlayerOutput;
    /**
     *
     * @type {PlayerOutput}
     * @memberof MatchOutput
     */
    loser: PlayerOutput;
}
/**
 *
 * @export
 * @interface MeAvatarsBody
 */
export interface MeAvatarsBody {
    /**
     *
     * @type {Blob}
     * @memberof MeAvatarsBody
     */
    file: Blob;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 *
 * @export
 * @interface OauthToken
 */
export interface OauthToken {
    /**
     *
     * @type {string}
     * @memberof OauthToken
     */
    access_token: string;
    /**
     *
     * @type {string}
     * @memberof OauthToken
     */
    token_type: string;
    /**
     *
     * @type {number}
     * @memberof OauthToken
     */
    expires_in: number;
    /**
     *
     * @type {string}
     * @memberof OauthToken
     */
    refresh_token: string;
    /**
     *
     * @type {string}
     * @memberof OauthToken
     */
    scope: string;
    /**
     *
     * @type {number}
     * @memberof OauthToken
     */
    created_at: number;
}
/**
 *
 * @export
 * @interface PlayerOutput
 */
export interface PlayerOutput {
    /**
     *
     * @type {UserOutput}
     * @memberof PlayerOutput
     */
    user: UserOutput;
    /**
     *
     * @type {number}
     * @memberof PlayerOutput
     */
    score: number;
}
/**
 *
 * @export
 * @interface UserOutput
 */
export interface UserOutput {
    /**
     *
     * @type {string}
     * @memberof UserOutput
     */
    login: string;
    /**
     *
     * @type {AvatarOutput}
     * @memberof UserOutput
     */
    actual_avatar: AvatarOutput;
    /**
     *
     * @type {string}
     * @memberof UserOutput
     */
    username: string;
    /**
     *
     * @type {boolean}
     * @memberof UserOutput
     */
    two_fa: boolean;
    /**
     *
     * @type {string}
     * @memberof UserOutput
     */
    status: UserOutput.StatusEnum;
    /**
     *
     * @type {UserStatsOutput}
     * @memberof UserOutput
     */
    stats: UserStatsOutput;
}
/**
 * @export
 * @namespace UserOutput
 */
export declare namespace UserOutput {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        Online,
        Offline,
        InGame,
        InQueue,
        Afk
    }
}
/**
 *
 * @export
 * @interface UserStatsOutput
 */
export interface UserStatsOutput {
    /**
     *
     * @type {number}
     * @memberof UserStatsOutput
     */
    id: number;
    /**
     *
     * @type {number}
     * @memberof UserStatsOutput
     */
    level: number;
    /**
     *
     * @type {number}
     * @memberof UserStatsOutput
     */
    victories: number;
    /**
     *
     * @type {number}
     * @memberof UserStatsOutput
     */
    defeats: number;
}
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export declare const AuthenticationApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuthentication(body?: any, options?: any): FetchArgs;
    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body?: any, options?: any): FetchArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuthentication(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OauthToken>;
    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OauthToken>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthAuthentication(body?: any, options?: any): Promise<OauthToken>;
    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(body?: any, options?: any): Promise<OauthToken>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    oauthAuthentication(body?: any, options?: any): Promise<OauthToken>;
    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    refreshToken(body?: any, options?: any): Promise<OauthToken>;
}
/**
 * AvatarsApi - fetch parameter creator
 * @export
 */
export declare const AvatarsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAvatar(avatar_id: string, options?: any): FetchArgs;
    /**
     *
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAvatars(onset?: number, length?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadUserAvatar(file?: Blob, options?: any): FetchArgs;
};
/**
 * AvatarsApi - functional programming interface
 * @export
 */
export declare const AvatarsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAvatar(avatar_id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAvatars(onset?: number, length?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AvatarOutput>>;
    /**
     *
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadUserAvatar(file?: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AvatarOutput>;
};
/**
 * AvatarsApi - factory interface
 * @export
 */
export declare const AvatarsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAvatar(avatar_id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAvatars(onset?: number, length?: number, options?: any): Promise<AvatarOutput[]>;
    /**
     *
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadUserAvatar(file?: Blob, options?: any): Promise<AvatarOutput>;
};
/**
 * AvatarsApi - object-oriented interface
 * @export
 * @class AvatarsApi
 * @extends {BaseAPI}
 */
export declare class AvatarsApi extends BaseAPI {
    /**
     *
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    deleteUserAvatar(avatar_id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    listUserAvatars(onset?: number, length?: number, options?: any): Promise<AvatarOutput[]>;
    /**
     *
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    uploadUserAvatar(file?: Blob, options?: any): Promise<AvatarOutput>;
}
/**
 * FriendsApi - fetch parameter creator
 * @export
 */
export declare const FriendsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFriendship(login: string, options?: any): FetchArgs;
    /**
     *
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFriendship(login: string, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersFriends(onset?: number, length?: number, search?: string, options?: any): FetchArgs;
};
/**
 * FriendsApi - functional programming interface
 * @export
 */
export declare const FriendsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFriendship(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFriendship(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersFriends(onset?: number, length?: number, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserOutput>>;
};
/**
 * FriendsApi - factory interface
 * @export
 */
export declare const FriendsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Add a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFriendship(login: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFriendship(login: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersFriends(onset?: number, length?: number, search?: string, options?: any): Promise<UserOutput[]>;
};
/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export declare class FriendsApi extends BaseAPI {
    /**
     *
     * @summary Add a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    createFriendship(login: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    deleteFriendship(login: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    listUsersFriends(onset?: number, length?: number, search?: string, options?: any): Promise<UserOutput[]>;
}
/**
 * MatchsApi - fetch parameter creator
 * @export
 */
export declare const MatchsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMatchHistory(onset?: number, length?: number, options?: any): FetchArgs;
};
/**
 * MatchsApi - functional programming interface
 * @export
 */
export declare const MatchsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMatchHistory(onset?: number, length?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MatchOutput>>;
};
/**
 * MatchsApi - factory interface
 * @export
 */
export declare const MatchsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMatchHistory(onset?: number, length?: number, options?: any): Promise<MatchOutput[]>;
};
/**
 * MatchsApi - object-oriented interface
 * @export
 * @class MatchsApi
 * @extends {BaseAPI}
 */
export declare class MatchsApi extends BaseAPI {
    /**
     *
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchsApi
     */
    getMatchHistory(onset?: number, length?: number, options?: any): Promise<MatchOutput[]>;
}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export declare const UsersApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create one user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body?: any, options?: any): FetchArgs;
    /**
     *
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(options?: any): FetchArgs;
    /**
     *
     * @summary Get details information on one user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByID(login: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMe(options?: any): FetchArgs;
    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(onset?: number, length?: number, search?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Partial update of the connected user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userPartialUpdate(body?: any, options?: any): FetchArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create one user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput>;
    /**
     *
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get details information on one user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByID(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput>;
    /**
     *
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMe(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput>;
    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(onset?: number, length?: number, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserOutput>>;
    /**
     *
     * @summary Partial update of the connected user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userPartialUpdate(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Create one user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body?: any, options?: any): Promise<UserOutput>;
    /**
     *
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(options?: any): Promise<Response>;
    /**
     *
     * @summary Get details information on one user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByID(login: string, options?: any): Promise<UserOutput>;
    /**
     *
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMe(options?: any): Promise<UserOutput>;
    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(onset?: number, length?: number, search?: string, options?: any): Promise<UserOutput[]>;
    /**
     *
     * @summary Partial update of the connected user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userPartialUpdate(body?: any, options?: any): Promise<UserOutput>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create one user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(body?: any, options?: any): Promise<UserOutput>;
    /**
     *
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(options?: any): Promise<Response>;
    /**
     *
     * @summary Get details information on one user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserByID(login: string, options?: any): Promise<UserOutput>;
    /**
     *
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserMe(options?: any): Promise<UserOutput>;
    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(onset?: number, length?: number, search?: string, options?: any): Promise<UserOutput[]>;
    /**
     *
     * @summary Partial update of the connected user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    userPartialUpdate(body?: any, options?: any): Promise<UserOutput>;
}
