"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * OpenAPI spec version: 1.0.11
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiFetchParamCreator = exports.MatchsApi = exports.MatchsApiFactory = exports.MatchsApiFp = exports.MatchsApiFetchParamCreator = exports.FriendsApi = exports.FriendsApiFactory = exports.FriendsApiFp = exports.FriendsApiFetchParamCreator = exports.AvatarsApi = exports.AvatarsApiFactory = exports.AvatarsApiFp = exports.AvatarsApiFetchParamCreator = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiFetchParamCreator = exports.UserOutput = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
const url = require("url");
const isomorphicFetch = require("isomorphic-fetch");
const BASE_PATH = "/api".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = isomorphicFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace UserOutput
 */
var UserOutput;
(function (UserOutput) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Online"] = 'online'] = "Online";
        StatusEnum[StatusEnum["Offline"] = 'offline'] = "Offline";
        StatusEnum[StatusEnum["InGame"] = 'in_game'] = "InGame";
        StatusEnum[StatusEnum["InQueue"] = 'in_queue'] = "InQueue";
        StatusEnum[StatusEnum["Afk"] = 'afk'] = "Afk";
    })(StatusEnum = UserOutput.StatusEnum || (UserOutput.StatusEnum = {}));
})(UserOutput = exports.UserOutput || (exports.UserOutput = {}));
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
exports.AuthenticationApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body, options = {}) {
            const localVarPath = `/auth/callback`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body, options = {}) {
            const localVarPath = `/auth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
exports.AuthenticationApiFp = function (configuration) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body, options) {
            const localVarFetchArgs = exports.AuthenticationApiFetchParamCreator(configuration).oauthAuthentication(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body, options) {
            const localVarFetchArgs = exports.AuthenticationApiFetchParamCreator(configuration).refreshToken(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
exports.AuthenticationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body, options) {
            return exports.AuthenticationApiFp(configuration).oauthAuthentication(body, options)(fetch, basePath);
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body, options) {
            return exports.AuthenticationApiFp(configuration).refreshToken(body, options)(fetch, basePath);
        },
    };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
class AuthenticationApi extends BaseAPI {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    oauthAuthentication(body, options) {
        return exports.AuthenticationApiFp(this.configuration).oauthAuthentication(body, options)(this.fetch, this.basePath);
    }
    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    refreshToken(body, options) {
        return exports.AuthenticationApiFp(this.configuration).refreshToken(body, options)(this.fetch, this.basePath);
    }
}
exports.AuthenticationApi = AuthenticationApi;
/**
 * AvatarsApi - fetch parameter creator
 * @export
 */
exports.AvatarsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id, options = {}) {
            // verify required parameter 'avatar_id' is not null or undefined
            if (avatar_id === null || avatar_id === undefined) {
                throw new RequiredError('avatar_id', 'Required parameter avatar_id was null or undefined when calling deleteUserAvatar.');
            }
            const localVarPath = `/users/me/avatars/{avatar_id}`
                .replace(`{${"avatar_id"}}`, encodeURIComponent(String(avatar_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset, length, options = {}) {
            const localVarPath = `/users/me/avatars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file, options = {}) {
            const localVarPath = `/users/me/avatars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication bearerAuth required
            if (file !== undefined) {
                localVarFormParams.set('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AvatarsApi - functional programming interface
 * @export
 */
exports.AvatarsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id, options) {
            const localVarFetchArgs = exports.AvatarsApiFetchParamCreator(configuration).deleteUserAvatar(avatar_id, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset, length, options) {
            const localVarFetchArgs = exports.AvatarsApiFetchParamCreator(configuration).listUserAvatars(onset, length, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file, options) {
            const localVarFetchArgs = exports.AvatarsApiFetchParamCreator(configuration).uploadUserAvatar(file, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AvatarsApi - factory interface
 * @export
 */
exports.AvatarsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id, options) {
            return exports.AvatarsApiFp(configuration).deleteUserAvatar(avatar_id, options)(fetch, basePath);
        },
        /**
         *
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset, length, options) {
            return exports.AvatarsApiFp(configuration).listUserAvatars(onset, length, options)(fetch, basePath);
        },
        /**
         *
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file, options) {
            return exports.AvatarsApiFp(configuration).uploadUserAvatar(file, options)(fetch, basePath);
        },
    };
};
/**
 * AvatarsApi - object-oriented interface
 * @export
 * @class AvatarsApi
 * @extends {BaseAPI}
 */
class AvatarsApi extends BaseAPI {
    /**
     *
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    deleteUserAvatar(avatar_id, options) {
        return exports.AvatarsApiFp(this.configuration).deleteUserAvatar(avatar_id, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    listUserAvatars(onset, length, options) {
        return exports.AvatarsApiFp(this.configuration).listUserAvatars(onset, length, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    uploadUserAvatar(file, options) {
        return exports.AvatarsApiFp(this.configuration).uploadUserAvatar(file, options)(this.fetch, this.basePath);
    }
}
exports.AvatarsApi = AvatarsApi;
/**
 * FriendsApi - fetch parameter creator
 * @export
 */
exports.FriendsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login, options = {}) {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login', 'Required parameter login was null or undefined when calling createFriendship.');
            }
            const localVarPath = `/users/me/friends/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login, options = {}) {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login', 'Required parameter login was null or undefined when calling deleteFriendship.');
            }
            const localVarPath = `/users/me/friends/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset, length, search, options = {}) {
            const localVarPath = `/users/me/friends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FriendsApi - functional programming interface
 * @export
 */
exports.FriendsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Add a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login, options) {
            const localVarFetchArgs = exports.FriendsApiFetchParamCreator(configuration).createFriendship(login, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login, options) {
            const localVarFetchArgs = exports.FriendsApiFetchParamCreator(configuration).deleteFriendship(login, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset, length, search, options) {
            const localVarFetchArgs = exports.FriendsApiFetchParamCreator(configuration).listUsersFriends(onset, length, search, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * FriendsApi - factory interface
 * @export
 */
exports.FriendsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Add a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login, options) {
            return exports.FriendsApiFp(configuration).createFriendship(login, options)(fetch, basePath);
        },
        /**
         *
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login, options) {
            return exports.FriendsApiFp(configuration).deleteFriendship(login, options)(fetch, basePath);
        },
        /**
         *
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset, length, search, options) {
            return exports.FriendsApiFp(configuration).listUsersFriends(onset, length, search, options)(fetch, basePath);
        },
    };
};
/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
class FriendsApi extends BaseAPI {
    /**
     *
     * @summary Add a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    createFriendship(login, options) {
        return exports.FriendsApiFp(this.configuration).createFriendship(login, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    deleteFriendship(login, options) {
        return exports.FriendsApiFp(this.configuration).deleteFriendship(login, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    listUsersFriends(onset, length, search, options) {
        return exports.FriendsApiFp(this.configuration).listUsersFriends(onset, length, search, options)(this.fetch, this.basePath);
    }
}
exports.FriendsApi = FriendsApi;
/**
 * MatchsApi - fetch parameter creator
 * @export
 */
exports.MatchsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset, length, options = {}) {
            const localVarPath = `/users/me/match_history`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MatchsApi - functional programming interface
 * @export
 */
exports.MatchsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset, length, options) {
            const localVarFetchArgs = exports.MatchsApiFetchParamCreator(configuration).getMatchHistory(onset, length, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MatchsApi - factory interface
 * @export
 */
exports.MatchsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset, length, options) {
            return exports.MatchsApiFp(configuration).getMatchHistory(onset, length, options)(fetch, basePath);
        },
    };
};
/**
 * MatchsApi - object-oriented interface
 * @export
 * @class MatchsApi
 * @extends {BaseAPI}
 */
class MatchsApi extends BaseAPI {
    /**
     *
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchsApi
     */
    getMatchHistory(onset, length, options) {
        return exports.MatchsApiFp(this.configuration).getMatchHistory(onset, length, options)(this.fetch, this.basePath);
    }
}
exports.MatchsApi = MatchsApi;
/**
 * UsersApi - fetch parameter creator
 * @export
 */
exports.UsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create one user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body, options = {}) {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options = {}) {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get details information on one user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login, options = {}) {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login', 'Required parameter login was null or undefined when calling getUserByID.');
            }
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options = {}) {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset, length, search, options = {}) {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Partial update of the connected user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body, options = {}) {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create one user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body, options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).deleteUser(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get details information on one user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login, options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getUserByID(login, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getUserMe(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset, length, search, options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUsers(onset, length, search, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Partial update of the connected user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body, options) {
            const localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).userPartialUpdate(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Create one user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body, options) {
            return exports.UsersApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options) {
            return exports.UsersApiFp(configuration).deleteUser(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get details information on one user
         * @param {string} login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login, options) {
            return exports.UsersApiFp(configuration).getUserByID(login, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options) {
            return exports.UsersApiFp(configuration).getUserMe(options)(fetch, basePath);
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset, length, search, options) {
            return exports.UsersApiFp(configuration).listUsers(onset, length, search, options)(fetch, basePath);
        },
        /**
         *
         * @summary Partial update of the connected user
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body, options) {
            return exports.UsersApiFp(configuration).userPartialUpdate(body, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create one user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(body, options) {
        return exports.UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(options) {
        return exports.UsersApiFp(this.configuration).deleteUser(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get details information on one user
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserByID(login, options) {
        return exports.UsersApiFp(this.configuration).getUserByID(login, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserMe(options) {
        return exports.UsersApiFp(this.configuration).getUserMe(options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(onset, length, search, options) {
        return exports.UsersApiFp(this.configuration).listUsers(onset, length, search, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Partial update of the connected user
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    userPartialUpdate(body, options) {
        return exports.UsersApiFp(this.configuration).userPartialUpdate(body, options)(this.fetch, this.basePath);
    }
}
exports.UsersApi = UsersApi;
