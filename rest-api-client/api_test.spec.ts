/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * OpenAPI spec version: 1.0.11
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("oauthAuthentication", () => {
    const body: api.any = undefined
    return expect(instance.oauthAuthentication(body, {})).resolves.toBe(null)
  })
  test("refreshToken", () => {
    const body: api.any = undefined
    return expect(instance.refreshToken(body, {})).resolves.toBe(null)
  })
})

describe("AvatarsApi", () => {
  let instance: api.AvatarsApi
  beforeEach(function() {
    instance = new api.AvatarsApi(config)
  });

  test("deleteUserAvatar", () => {
    const avatar_id: string = "avatar_id_example"
    return expect(instance.deleteUserAvatar(avatar_id, {})).resolves.toBe(null)
  })
  test("listUserAvatars", () => {
    const onset: number = 789
    const length: number = 789
    return expect(instance.listUserAvatars(onset, length, {})).resolves.toBe(null)
  })
  test("uploadUserAvatar", () => {
    const file: Blob = "file_example"
    return expect(instance.uploadUserAvatar(file, {})).resolves.toBe(null)
  })
})

describe("FriendsApi", () => {
  let instance: api.FriendsApi
  beforeEach(function() {
    instance = new api.FriendsApi(config)
  });

  test("createFriendship", () => {
    const login: string = "login_example"
    return expect(instance.createFriendship(login, {})).resolves.toBe(null)
  })
  test("deleteFriendship", () => {
    const login: string = "login_example"
    return expect(instance.deleteFriendship(login, {})).resolves.toBe(null)
  })
  test("listUsersFriends", () => {
    const onset: number = 789
    const length: number = 789
    const Search: string = "Search_example"
    return expect(instance.listUsersFriends(onset, length, Search, {})).resolves.toBe(null)
  })
})

describe("MatchsApi", () => {
  let instance: api.MatchsApi
  beforeEach(function() {
    instance = new api.MatchsApi(config)
  });

  test("getMatchHistory", () => {
    const onset: number = 789
    const length: number = 789
    return expect(instance.getMatchHistory(onset, length, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("createUser", () => {
    const body: api.any = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    return expect(instance.deleteUser({})).resolves.toBe(null)
  })
  test("getUserByID", () => {
    const login: string = "login_example"
    return expect(instance.getUserByID(login, {})).resolves.toBe(null)
  })
  test("getUserMe", () => {
    return expect(instance.getUserMe({})).resolves.toBe(null)
  })
  test("listUsers", () => {
    const onset: number = 789
    const length: number = 789
    const Search: string = "Search_example"
    return expect(instance.listUsers(onset, length, Search, {})).resolves.toBe(null)
  })
  test("userPartialUpdate", () => {
    const body: api.any = undefined
    return expect(instance.userPartialUpdate(body, {})).resolves.toBe(null)
  })
})

