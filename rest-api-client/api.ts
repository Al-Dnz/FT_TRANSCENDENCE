/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ft_transcendance API
 * ft_transcendance API
 *
 * OpenAPI spec version: 1.0.11
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AvatarOutput
 */
export interface AvatarOutput {
    /**
     * 
     * @type {number}
     * @memberof AvatarOutput
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AvatarOutput
     */
    path: string;
}
/**
 * 
 * @export
 * @interface MatchOutput
 */
export interface MatchOutput {
    /**
     * 
     * @type {number}
     * @memberof MatchOutput
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MatchOutput
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof MatchOutput
     */
    finished_at: string;
    /**
     * 
     * @type {PlayerOutput}
     * @memberof MatchOutput
     */
    winner: PlayerOutput;
    /**
     * 
     * @type {PlayerOutput}
     * @memberof MatchOutput
     */
    loser: PlayerOutput;
}
/**
 * 
 * @export
 * @interface MeAvatarsBody
 */
export interface MeAvatarsBody {
    /**
     * 
     * @type {Blob}
     * @memberof MeAvatarsBody
     */
    file: Blob;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @interface OauthToken
 */
export interface OauthToken {
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    token_type: string;
    /**
     * 
     * @type {number}
     * @memberof OauthToken
     */
    expires_in: number;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthToken
     */
    scope: string;
    /**
     * 
     * @type {number}
     * @memberof OauthToken
     */
    created_at: number;
}
/**
 * 
 * @export
 * @interface PlayerOutput
 */
export interface PlayerOutput {
    /**
     * 
     * @type {UserOutput}
     * @memberof PlayerOutput
     */
    user: UserOutput;
    /**
     * 
     * @type {number}
     * @memberof PlayerOutput
     */
    score: number;
}
/**
 * 
 * @export
 * @interface UserOutput
 */
export interface UserOutput {
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    login: string;
    /**
     * 
     * @type {AvatarOutput}
     * @memberof UserOutput
     */
    actual_avatar: AvatarOutput;
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    username: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserOutput
     */
    two_fa: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserOutput
     */
    status: UserOutput.StatusEnum;
    /**
     * 
     * @type {UserStatsOutput}
     * @memberof UserOutput
     */
    stats: UserStatsOutput;
}

/**
 * @export
 * @namespace UserOutput
 */
export namespace UserOutput {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Online = <any> 'online',
        Offline = <any> 'offline',
        InGame = <any> 'in_game',
        InQueue = <any> 'in_queue',
        Afk = <any> 'afk'
    }
}
/**
 * 
 * @export
 * @interface UserStatsOutput
 */
export interface UserStatsOutput {
    /**
     * 
     * @type {number}
     * @memberof UserStatsOutput
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof UserStatsOutput
     */
    level: number;
    /**
     * 
     * @type {number}
     * @memberof UserStatsOutput
     */
    victories: number;
    /**
     * 
     * @type {number}
     * @memberof UserStatsOutput
     */
    defeats: number;
}
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/auth/callback`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/auth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OauthToken> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).oauthAuthentication(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OauthToken> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).refreshToken(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Resolve oauth authentication code flow
         * @summary Oauth authentication code flow
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAuthentication(body?: any, options?: any) {
            return AuthenticationApiFp(configuration).oauthAuthentication(body, options)(fetch, basePath);
        },
        /**
         * Allow you to get a new access and refresh token from your refresh token
         * @summary Get new tokens
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(body?: any, options?: any) {
            return AuthenticationApiFp(configuration).refreshToken(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Resolve oauth authentication code flow
     * @summary Oauth authentication code flow
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public oauthAuthentication(body?: any, options?: any) {
        return AuthenticationApiFp(this.configuration).oauthAuthentication(body, options)(this.fetch, this.basePath);
    }

    /**
     * Allow you to get a new access and refresh token from your refresh token
     * @summary Get new tokens
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshToken(body?: any, options?: any) {
        return AuthenticationApiFp(this.configuration).refreshToken(body, options)(this.fetch, this.basePath);
    }

}
/**
 * AvatarsApi - fetch parameter creator
 * @export
 */
export const AvatarsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id: string, options: any = {}): FetchArgs {
            // verify required parameter 'avatar_id' is not null or undefined
            if (avatar_id === null || avatar_id === undefined) {
                throw new RequiredError('avatar_id','Required parameter avatar_id was null or undefined when calling deleteUserAvatar.');
            }
            const localVarPath = `/users/me/avatars/{avatar_id}`
                .replace(`{${"avatar_id"}}`, encodeURIComponent(String(avatar_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset?: number, length?: number, options: any = {}): FetchArgs {
            const localVarPath = `/users/me/avatars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file?: Blob, options: any = {}): FetchArgs {
            const localVarPath = `/users/me/avatars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication bearerAuth required

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarsApi - functional programming interface
 * @export
 */
export const AvatarsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AvatarsApiFetchParamCreator(configuration).deleteUserAvatar(avatar_id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset?: number, length?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AvatarOutput>> {
            const localVarFetchArgs = AvatarsApiFetchParamCreator(configuration).listUserAvatars(onset, length, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file?: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AvatarOutput> {
            const localVarFetchArgs = AvatarsApiFetchParamCreator(configuration).uploadUserAvatar(file, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AvatarsApi - factory interface
 * @export
 */
export const AvatarsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete an avatar for the connected user
         * @param {string} avatar_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(avatar_id: string, options?: any) {
            return AvatarsApiFp(configuration).deleteUserAvatar(avatar_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List the users avatar
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAvatars(onset?: number, length?: number, options?: any) {
            return AvatarsApiFp(configuration).listUserAvatars(onset, length, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upload an avatar for the connected user
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserAvatar(file?: Blob, options?: any) {
            return AvatarsApiFp(configuration).uploadUserAvatar(file, options)(fetch, basePath);
        },
    };
};

/**
 * AvatarsApi - object-oriented interface
 * @export
 * @class AvatarsApi
 * @extends {BaseAPI}
 */
export class AvatarsApi extends BaseAPI {
    /**
     * 
     * @summary Delete an avatar for the connected user
     * @param {string} avatar_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public deleteUserAvatar(avatar_id: string, options?: any) {
        return AvatarsApiFp(this.configuration).deleteUserAvatar(avatar_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List the users avatar
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public listUserAvatars(onset?: number, length?: number, options?: any) {
        return AvatarsApiFp(this.configuration).listUserAvatars(onset, length, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upload an avatar for the connected user
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public uploadUserAvatar(file?: Blob, options?: any) {
        return AvatarsApiFp(this.configuration).uploadUserAvatar(file, options)(this.fetch, this.basePath);
    }

}
/**
 * FriendsApi - fetch parameter creator
 * @export
 */
export const FriendsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login: string, options: any = {}): FetchArgs {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling createFriendship.');
            }
            const localVarPath = `/users/me/friends/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login: string, options: any = {}): FetchArgs {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling deleteFriendship.');
            }
            const localVarPath = `/users/me/friends/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset?: number, length?: number, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/users/me/friends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendsApi - functional programming interface
 * @export
 */
export const FriendsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FriendsApiFetchParamCreator(configuration).createFriendship(login, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FriendsApiFetchParamCreator(configuration).deleteFriendship(login, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset?: number, length?: number, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserOutput>> {
            const localVarFetchArgs = FriendsApiFetchParamCreator(configuration).listUsersFriends(onset, length, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FriendsApi - factory interface
 * @export
 */
export const FriendsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(login: string, options?: any) {
            return FriendsApiFp(configuration).createFriendship(login, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a user to the friends list of the connected user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(login: string, options?: any) {
            return FriendsApiFp(configuration).deleteFriendship(login, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieve the list of friends of the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersFriends(onset?: number, length?: number, search?: string, options?: any) {
            return FriendsApiFp(configuration).listUsersFriends(onset, length, search, options)(fetch, basePath);
        },
    };
};

/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export class FriendsApi extends BaseAPI {
    /**
     * 
     * @summary Add a user to the friends list of the connected user
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public createFriendship(login: string, options?: any) {
        return FriendsApiFp(this.configuration).createFriendship(login, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a user to the friends list of the connected user
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public deleteFriendship(login: string, options?: any) {
        return FriendsApiFp(this.configuration).deleteFriendship(login, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieve the list of friends of the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public listUsersFriends(onset?: number, length?: number, search?: string, options?: any) {
        return FriendsApiFp(this.configuration).listUsersFriends(onset, length, search, options)(this.fetch, this.basePath);
    }

}
/**
 * MatchsApi - fetch parameter creator
 * @export
 */
export const MatchsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset?: number, length?: number, options: any = {}): FetchArgs {
            const localVarPath = `/users/me/match_history`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchsApi - functional programming interface
 * @export
 */
export const MatchsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset?: number, length?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MatchOutput>> {
            const localVarFetchArgs = MatchsApiFetchParamCreator(configuration).getMatchHistory(onset, length, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MatchsApi - factory interface
 * @export
 */
export const MatchsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get the match history for the connected user
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchHistory(onset?: number, length?: number, options?: any) {
            return MatchsApiFp(configuration).getMatchHistory(onset, length, options)(fetch, basePath);
        },
    };
};

/**
 * MatchsApi - object-oriented interface
 * @export
 * @class MatchsApi
 * @extends {BaseAPI}
 */
export class MatchsApi extends BaseAPI {
    /**
     * 
     * @summary Get the match history for the connected user
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchsApi
     */
    public getMatchHistory(onset?: number, length?: number, options?: any) {
        return MatchsApiFp(this.configuration).getMatchHistory(onset, length, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options: any = {}): FetchArgs {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details information on one user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login: string, options: any = {}): FetchArgs {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling getUserByID.');
            }
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options: any = {}): FetchArgs {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset?: number, length?: number, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (onset !== undefined) {
                localVarQueryParameter['onset'] = onset;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partial update of the connected user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).deleteUser(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get details information on one user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUserByID(login, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUserMe(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset?: number, length?: number, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserOutput>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).listUsers(onset, length, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Partial update of the connected user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserOutput> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).userPartialUpdate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create one user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body?: any, options?: any) {
            return UsersApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options?: any) {
            return UsersApiFp(configuration).deleteUser(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get details information on one user
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(login: string, options?: any) {
            return UsersApiFp(configuration).getUserByID(login, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get details information about the connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMe(options?: any) {
            return UsersApiFp(configuration).getUserMe(options)(fetch, basePath);
        },
        /**
         * Get a list of users
         * @summary List users
         * @param {number} [onset] beginning index of the list (default: 0)
         * @param {number} [length] size of the list (default: all)
         * @param {string} [search] pattern to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(onset?: number, length?: number, search?: string, options?: any) {
            return UsersApiFp(configuration).listUsers(onset, length, search, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Partial update of the connected user
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPartialUpdate(body?: any, options?: any) {
            return UsersApiFp(configuration).userPartialUpdate(body, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create one user
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(body?: any, options?: any) {
        return UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(options?: any) {
        return UsersApiFp(this.configuration).deleteUser(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get details information on one user
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByID(login: string, options?: any) {
        return UsersApiFp(this.configuration).getUserByID(login, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get details information about the connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserMe(options?: any) {
        return UsersApiFp(this.configuration).getUserMe(options)(this.fetch, this.basePath);
    }

    /**
     * Get a list of users
     * @summary List users
     * @param {number} [onset] beginning index of the list (default: 0)
     * @param {number} [length] size of the list (default: all)
     * @param {string} [search] pattern to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(onset?: number, length?: number, search?: string, options?: any) {
        return UsersApiFp(this.configuration).listUsers(onset, length, search, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Partial update of the connected user
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userPartialUpdate(body?: any, options?: any) {
        return UsersApiFp(this.configuration).userPartialUpdate(body, options)(this.fetch, this.basePath);
    }

}
