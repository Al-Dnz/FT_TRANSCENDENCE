openapi: 3.0.3
info:
  title: ft_transcendance API
  description: |-
    ft_transcendance API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: /api/v1
tags:
  - name: Users
    description: Operations about users
  - name: Friends
    description: Operations about users friendship
  - name: Avatars
    description: Operations about users avatars
  - name: Matchs
    description: Operations about matchs
paths:
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get a list of users
      operationId: ListUsers
      parameters:
        - $ref: "#/components/parameters/Onset"
        - $ref: "#/components/parameters/Length"
        - $ref: "#/components/parameters/Search"
      responses:
        '200':
          $ref: "#/components/responses/UserListResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Users
      summary: Create one user
      operationId: CreateUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserInput'
      responses:
        '201':
          $ref : "#/components/responses/UserResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me:
    get:
      tags:
        - Users
      summary: Get details information about the connected user
      operationId: GetUserMe
      responses:
        '200':
          $ref : "#/components/responses/UserResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Users
      summary: Partial update of the connected user
      operationId: UserPartialUpdate"
      requestBody:
        $ref: "#/components/requestBodies/PartialUpdateUserInput"
      responses:
        '200':
          $ref : "#/components/responses/UserResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Users
      summary: Delete the connected user
      operationId: DeleteUser
      responses:
        '204':
          description: "Successful delete"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/{userID}:
    get:
      tags:
        - Users
      summary: Get details information on one user
      operationId: GetUserByID
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me/friends:
    get:
      tags:
        - Friends
      summary: Retrieve the list of friends of the connected user
      operationId: ListUsersFriends
      parameters:
        - $ref: "#/components/parameters/Onset"
        - $ref: "#/components/parameters/Length"
        - $ref: "#/components/parameters/Search"
      responses:
        '200':
          $ref: "#/components/responses/UserListResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me/friends/{user_id}:
    put:
      tags:
        - Friends
      summary: Add a user to the friends list of the connected user
      operationId: CreateFriendship
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        '204':
            description: "success response"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Friends
      summary: Remove a user to the friends list of the connected user
      operationId: DeleteFriendship
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        '204':
            description: "success response"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me/avatars:
    get:
      tags:
       - Avatars
      summary: List the users avatar
      parameters:
        - $ref: "#/components/parameters/Onset"
        - $ref: "#/components/parameters/Length"
      operationId: ListUserAvatars
      responses:
        '200':
          $ref: "#/components/responses/AvatarListResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Avatars
      summary: Upload an avatar for the connected user
      operationId: UploadUserAvatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file_name
                - file_content
              properties:
                file_name:
                  type: string
                  example: "me.png"
                file_content:
                  type: string
                  format: binary
      responses:
        '201':
          $ref: "#/components/responses/AvatarResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me/avatars/{avatar_id}:
    delete:
      tags:
        - Avatars
      summary: Delete an avatar for the connected user
      operationId: DeleteUserAvatar
      parameters:
        - $ref: '#/components/parameters/AvatarID'
      responses:
        '204':
          description: "successfull delete"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /users/me/match_history:
    get:
      tags:
        - Matchs
      summary: Get the match history for the connected user
      operationId: GetMatchHistory
      parameters:
        - $ref: "#/components/parameters/Onset"
        - $ref: "#/components/parameters/Length"
      responses:
        '200':
          $ref: "#/components/responses/MatchHistoryResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"

components:
  responses:
    Unauthorized:
      description: No token provided or invalid token provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Ressource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserResponse:
      description: success response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserOutput'
    UserListResponse:
      description: success response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserOutput'
    AvatarListResponse:
      description: success response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AvatarOutput'
    AvatarResponse:
      description: success response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AvatarOutput'
    AvatarBinaryResponse:
      description: "success response"
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    MatchHistoryResponse:
      description: success response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MatchOutput"
  parameters:
    Onset:
      description: "beginning index of the list (default: 0)"
      in: query
      name: onset
      required: false
      schema:
        type: integer
        format: int64
    Length:
      description: "size of the list (default: all)"
      in: query
      name: length
      required: false
      schema:
        type: integer
        format: int64
    Search:
      description: "pattern to search for"
      in: query
      name: search
      required: false
      schema:
        type: string
    UserID:
      name: user_id
      in: path
      required: true
      schema:
        type: string
    AvatarID:
      name: avatar_id
      in: path
      required: true
      schema:
        type: string
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: some message explaining the error
    PlayerOutput:
      type: object
      required:
        - user
        - score
      properties:
        user:
          $ref: "#/components/schemas/UserOutput"
        score:
          type: integer
          format: int64
          example: 6
    MatchOutput:
      type: object
      required:
        - id
        - created_at
        - finished_at
        - loser
        - winner
      properties:
        id:
          type: integer
          format: int64
          example: 111
        created_at:
          type: string
          format: datetime
        finished_at:
          type: string
          format: datetime
        winner:
          $ref: "#/components/schemas/PlayerOutput"
        loser:
          $ref: "#/components/schemas/PlayerOutput"
    UserStatsOutput:
      type: object
      required:
        - id
        - level
        - victories
        - defeats
      properties:
        id:
          type: integer
          format: int64
          example: 11
        level:
          type: integer
          format: int64
          example: 21
        victories:
          type: integer
          format: int64
          example: 20
        defeats:
          type: integer
          format: int64
          example: 0
    AvatarOutput:
      type: object
      required:
        - id
        - path
      properties:
        id:
          type: integer
          format: int64
          example: 11
        path:
          type: string
          example: "/pictures/me.png"
    UserOutput:
      type: object
      required:
       - id
       - username
       - 2fa
       - status
       - actual_avatar
       - stats
      properties:
        id:
          type: integer
          format: int64
          example: 11
        actual_avatar:
          $ref: "#/components/schemas/AvatarOutput"
        username:
          type: string
          example: dboyer
        2fa:
          type: boolean
          example: true
        status:
          type: string
          enum:
            - online
            - offline
            - in_game
            - in_queue
            - afk
        stats:
          $ref: "#/components/schemas/UserStatsOutput"
  requestBodies:
    PartialUpdateUserInput:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: dboyer
              2fa:
                type: boolean
                example: false
    CreateUserInput:
      content:
        application/json:
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
                example: dboyer
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header